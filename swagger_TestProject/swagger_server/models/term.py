# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Term(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, input: str=None, ner_result: str=None, relation_result: str=None):  # noqa: E501
        """Term - a model defined in Swagger

        :param input: The input of this Term.  # noqa: E501
        :type input: str
        :param ner_result: The ner_result of this Term.  # noqa: E501
        :type ner_result: str
        :param relation_result: The relation_result of this Term.  # noqa: E501
        :type relation_result: str
        """
        self.swagger_types = {
            'input': str,
            'ner_result': str,
            'relation_result': str
        }

        self.attribute_map = {
            'input': 'input',
            'ner_result': 'nerResult',
            'relation_result': 'relationResult'
        }

        self._input = input
        self._ner_result = ner_result
        self._relation_result = relation_result

    @classmethod
    def from_dict(cls, dikt) -> 'Term':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Term of this Term.  # noqa: E501
        :rtype: Term
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input(self) -> str:
        """Gets the input of this Term.


        :return: The input of this Term.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input: str):
        """Sets the input of this Term.


        :param input: The input of this Term.
        :type input: str
        """

        self._input = input

    @property
    def ner_result(self) -> str:
        """Gets the ner_result of this Term.


        :return: The ner_result of this Term.
        :rtype: str
        """
        return self._ner_result

    @ner_result.setter
    def ner_result(self, ner_result: str):
        """Sets the ner_result of this Term.


        :param ner_result: The ner_result of this Term.
        :type ner_result: str
        """

        self._ner_result = ner_result

    @property
    def relation_result(self) -> str:
        """Gets the relation_result of this Term.


        :return: The relation_result of this Term.
        :rtype: str
        """
        return self._relation_result

    @relation_result.setter
    def relation_result(self, relation_result: str):
        """Sets the relation_result of this Term.


        :param relation_result: The relation_result of this Term.
        :type relation_result: str
        """

        self._relation_result = relation_result
